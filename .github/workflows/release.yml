name: Create release
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Delete Existing Release
      uses: ame-yu/action-delete-latest-release@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install zip
      run: sudo apt install p7zip-full

    - name: Archive Mod
      run: |
        7za -tzip a "./HLM2ComboCounterImproved.zip" "./HLM2 Combo Counter Improved"
        
    - name: Create New Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          This release zip is automatically updated on every push. You can ignore the "x commits behind" message.

    - name: Upload Mod Zip to Release
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./HLM2ComboCounterImproved.zip
        asset_name: HLM2ComboCounterImproved.zip
        asset_content_type: application/zip

    - name: Hash mod and create meta file
      id: create_meta_file
      run: |
        metafile=$(cat ./github/meta.json)
        hash=$(python3 ./SuperBLT_Hasher.py "./HLM2 Combo Counter Improved")
        meta="${metafile/%HASH%/"$hash"}"
        echo "$meta" > ./meta.json

    - name: Upload meta file to Release
      id: upload-meta-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./meta.json
        asset_name: meta.json
        asset_content_type: application/json